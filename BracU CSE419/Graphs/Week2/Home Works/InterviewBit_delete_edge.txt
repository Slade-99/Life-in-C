#include <bits/stdc++.h>
using namespace std;
const int N= 1e6+10;

vector<int> adj[100001];
int subtree_sum[100001],vis[100001];
int dfs(int node,vector<int> &v){
    vis[node]=1;
    int cnt=v[node-1];
    for(auto &child:adj[node]){
        if(!vis[child]){
            cnt+=dfs(child,v);
        }
    }
    return subtree_sum[node]=cnt;
}
int Solution::deleteEdge(vector<int> &v, vector<vector<int> > &edges) {
    int n=v.size();
    for(int i=1;i<=n;i++){
        adj[i].clear();
        subtree_sum[i]=0;
        vis[i]=0;
    }
    for(auto &e:edges){
        adj[e[1]].push_back(e[0]);
        adj[e[0]].push_back(e[1]);
    }
    dfs(1,v);
    long long ans=0,mod=1e9+7;
    for(int i=2;i<=n;i++){
        long long p1=subtree_sum[i],p2=subtree_sum[1]-p1;
        ans=max(ans,(p1*p2)%mod);
    }
    return ans;
}